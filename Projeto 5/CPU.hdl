/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Registrador A:
    // Se for uma instrução do tipo A, deve ser carregada no registrador A;
    // Se for uma do tipo C, caso o bit de destino d1 seja igual a 1,
    // armazena a saída do ALU no registrador A
   
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);
    Not(in=instruction[15], out=not-instruction15);
    Or(a=not-instruction15, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);

    // Registrador D:
    // Se for uma instrução do tipo C, caso o bit de destino d2 seja igual a 1,
    // armazena a saída do ALU no registrador D
    
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);

    
    // ALU:
    // D é uma das entradas do ALU
    // e A é a outra se o bit a da instrução for igual a 0;
    // se for igual a 1, M é a outra entrada do ALU
    
    Mux16(a=outA, b=inM, sel=instruction[12], out=A-or-M);
    ALU(x=outD, y=A-or-M, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zrALU, ng=ngALU);

    // PC:
    // Se a condição de salto for verdadeira, PC será carregado com o endereço
    // armazenado no registrador A;
    // se não, o endereço no PC é incrementado;
    
    Or(a=ngALU, b=zrALU, out=ng-or-zrALU);
    Not(in=ng-or-zrALU, out=posALU);
    And(a=instruction[0], b=posALU, out=jump0);
    And(a=instruction[1], b=zrALU, out=jump1);
    And(a=instruction[2], b=ngALU, out=jump2);
    Or(a=jump0, b=jump1, out=jump01);
    Or(a=jump01, b=jump2, out=jump012);
    And(a=jump012, b=instruction[15], out=jump);
    PC(in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc);

    //Se esta for um instrução do tipo C, caso o bit de destino d3 seja 1,
    //o valor da saída da ALU deve ser armazenado na memória; 

    And(a=instruction[15], b=instruction[3], out=writeM);
}
